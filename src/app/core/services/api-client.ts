//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class DepartmentsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    createDepartment(command: CreateDepartmentCommand): Observable<TabDepartment> {
        let url_ = this.baseUrl + "/api/Departments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateDepartment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateDepartment(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TabDepartment>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TabDepartment>;
        }));
    }

    protected processCreateDepartment(response: HttpResponseBase): Observable<TabDepartment> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TabDepartment.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createDepartmentList(command: CreateDepartmentListCommand): Observable<TabDepartment[]> {
        let url_ = this.baseUrl + "/api/Departments/List";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateDepartmentList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateDepartmentList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TabDepartment[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TabDepartment[]>;
        }));
    }

    protected processCreateDepartmentList(response: HttpResponseBase): Observable<TabDepartment[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TabDepartment.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getDepartmentList(): Observable<DepartmentListDto[]> {
        let url_ = this.baseUrl + "/api/Departments/List";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDepartmentList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDepartmentList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DepartmentListDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DepartmentListDto[]>;
        }));
    }

    protected processGetDepartmentList(response: HttpResponseBase): Observable<DepartmentListDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DepartmentListDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getDepartmentTree(): Observable<DepartmentDto[]> {
        let url_ = this.baseUrl + "/api/Departments/Tree";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDepartmentTree(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDepartmentTree(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DepartmentDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DepartmentDto[]>;
        }));
    }

    protected processGetDepartmentTree(response: HttpResponseBase): Observable<DepartmentDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DepartmentDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class AssetCategoriesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    createAssetCategory(command: CreateAssetCategoryCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/AssetCategories";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateAssetCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateAssetCategory(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreateAssetCategory(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAssetCategoriesWithPagination(pageNumber: number, pageSize: number, searchTerm?: string | null | undefined): Observable<PaginatedListOfAssetCategoryBriefDto> {
        let url_ = this.baseUrl + "/api/AssetCategories?";
        if (pageNumber === undefined || pageNumber === null)
            throw new Error("The parameter 'pageNumber' must be defined and cannot be null.");
        else
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === undefined || pageSize === null)
            throw new Error("The parameter 'pageSize' must be defined and cannot be null.");
        else
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (searchTerm !== undefined && searchTerm !== null)
            url_ += "SearchTerm=" + encodeURIComponent("" + searchTerm) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAssetCategoriesWithPagination(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAssetCategoriesWithPagination(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfAssetCategoryBriefDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfAssetCategoryBriefDto>;
        }));
    }

    protected processGetAssetCategoriesWithPagination(response: HttpResponseBase): Observable<PaginatedListOfAssetCategoryBriefDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfAssetCategoryBriefDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateAssetCategory(name: string, command: UpdateAssetCategoryCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/AssetCategories/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateAssetCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateAssetCategory(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateAssetCategory(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteAssetCategory(name: string): Observable<void> {
        let url_ = this.baseUrl + "/api/AssetCategories/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteAssetCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteAssetCategory(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteAssetCategory(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAssetCategory(name: string): Observable<AssetCategoryDto> {
        let url_ = this.baseUrl + "/api/AssetCategories/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAssetCategory(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAssetCategory(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AssetCategoryDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AssetCategoryDto>;
        }));
    }

    protected processGetAssetCategory(response: HttpResponseBase): Observable<AssetCategoryDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AssetCategoryDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAssetCategoryTree(): Observable<AssetCategoryTreeDto[]> {
        let url_ = this.baseUrl + "/api/AssetCategories/tree";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAssetCategoryTree(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAssetCategoryTree(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AssetCategoryTreeDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AssetCategoryTreeDto[]>;
        }));
    }

    protected processGetAssetCategoryTree(response: HttpResponseBase): Observable<AssetCategoryTreeDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AssetCategoryTreeDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAssetCategoryList(): Observable<AssetCategoryBriefDto[]> {
        let url_ = this.baseUrl + "/api/AssetCategories/list";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAssetCategoryList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAssetCategoryList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AssetCategoryBriefDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AssetCategoryBriefDto[]>;
        }));
    }

    protected processGetAssetCategoryList(response: HttpResponseBase): Observable<AssetCategoryBriefDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AssetCategoryBriefDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class AssetOperationsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    createAssetOperation(command: CreateAssetOperationCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/AssetOperations";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateAssetOperation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateAssetOperation(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreateAssetOperation(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAssetOperationList(): Observable<Tabasset_operation[]> {
        let url_ = this.baseUrl + "/api/AssetOperations";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAssetOperationList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAssetOperationList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Tabasset_operation[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Tabasset_operation[]>;
        }));
    }

    protected processGetAssetOperationList(response: HttpResponseBase): Observable<Tabasset_operation[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Tabasset_operation.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateAssetOperation(name: string, command: UpdateAssetOperationCommand): Observable<Tabasset_operation> {
        let url_ = this.baseUrl + "/api/AssetOperations/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateAssetOperation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateAssetOperation(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Tabasset_operation>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Tabasset_operation>;
        }));
    }

    protected processUpdateAssetOperation(response: HttpResponseBase): Observable<Tabasset_operation> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Tabasset_operation.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteAssetOperation(name: string): Observable<void> {
        let url_ = this.baseUrl + "/api/AssetOperations/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteAssetOperation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteAssetOperation(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteAssetOperation(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAssetOperationById(name: string): Observable<Tabasset_operation> {
        let url_ = this.baseUrl + "/api/AssetOperations/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAssetOperationById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAssetOperationById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Tabasset_operation>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Tabasset_operation>;
        }));
    }

    protected processGetAssetOperationById(response: HttpResponseBase): Observable<Tabasset_operation> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Tabasset_operation.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAssetOperationListByFilters(query: GetAssetOperationListByFiltersQuery): Observable<Tabasset_operation[]> {
        let url_ = this.baseUrl + "/api/AssetOperations/filter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAssetOperationListByFilters(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAssetOperationListByFilters(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Tabasset_operation[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Tabasset_operation[]>;
        }));
    }

    protected processGetAssetOperationListByFilters(response: HttpResponseBase): Observable<Tabasset_operation[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Tabasset_operation.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class AssetOperationStatusesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    createAssetOperationStatus(command: CreateAssetOperationStatusCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/AssetOperationStatuses";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateAssetOperationStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateAssetOperationStatus(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreateAssetOperationStatus(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAssetOperationStatusList(): Observable<Tabasset_operation_status[]> {
        let url_ = this.baseUrl + "/api/AssetOperationStatuses";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAssetOperationStatusList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAssetOperationStatusList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Tabasset_operation_status[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Tabasset_operation_status[]>;
        }));
    }

    protected processGetAssetOperationStatusList(response: HttpResponseBase): Observable<Tabasset_operation_status[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Tabasset_operation_status.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateAssetOperationStatus(name: string, command: UpdateAssetOperationStatusCommand): Observable<Tabasset_operation_status> {
        let url_ = this.baseUrl + "/api/AssetOperationStatuses/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateAssetOperationStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateAssetOperationStatus(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Tabasset_operation_status>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Tabasset_operation_status>;
        }));
    }

    protected processUpdateAssetOperationStatus(response: HttpResponseBase): Observable<Tabasset_operation_status> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Tabasset_operation_status.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteAssetOperationStatus(name: string): Observable<void> {
        let url_ = this.baseUrl + "/api/AssetOperationStatuses/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteAssetOperationStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteAssetOperationStatus(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteAssetOperationStatus(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAssetOperationStatusById(name: string): Observable<Tabasset_operation_status> {
        let url_ = this.baseUrl + "/api/AssetOperationStatuses/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAssetOperationStatusById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAssetOperationStatusById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Tabasset_operation_status>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Tabasset_operation_status>;
        }));
    }

    protected processGetAssetOperationStatusById(response: HttpResponseBase): Observable<Tabasset_operation_status> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Tabasset_operation_status.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAssetOperationStatusListByFilters(query: GetAssetOperationStatusListByFiltersQuery): Observable<Tabasset_operation_status[]> {
        let url_ = this.baseUrl + "/api/AssetOperationStatuses/filter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAssetOperationStatusListByFilters(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAssetOperationStatusListByFilters(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Tabasset_operation_status[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Tabasset_operation_status[]>;
        }));
    }

    protected processGetAssetOperationStatusListByFilters(response: HttpResponseBase): Observable<Tabasset_operation_status[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Tabasset_operation_status.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class AssetsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    createAsset(command: CreateAssetCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Assets";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateAsset(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateAsset(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreateAsset(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAssetList(): Observable<TabAsset[]> {
        let url_ = this.baseUrl + "/api/Assets";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAssetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAssetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TabAsset[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TabAsset[]>;
        }));
    }

    protected processGetAssetList(response: HttpResponseBase): Observable<TabAsset[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TabAsset.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateAsset(name: string, command: UpdateAssetCommand): Observable<TabAsset> {
        let url_ = this.baseUrl + "/api/Assets/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateAsset(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateAsset(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TabAsset>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TabAsset>;
        }));
    }

    protected processUpdateAsset(response: HttpResponseBase): Observable<TabAsset> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TabAsset.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteAsset(name: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Assets/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteAsset(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteAsset(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteAsset(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAssetById(name: string): Observable<TabAsset> {
        let url_ = this.baseUrl + "/api/Assets/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAssetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAssetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TabAsset>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TabAsset>;
        }));
    }

    protected processGetAssetById(response: HttpResponseBase): Observable<TabAsset> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TabAsset.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAssetListByFilters(query: GetAssetListByFiltersQuery): Observable<TabAsset[]> {
        let url_ = this.baseUrl + "/api/Assets/filter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAssetListByFilters(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAssetListByFilters(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TabAsset[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TabAsset[]>;
        }));
    }

    protected processGetAssetListByFilters(response: HttpResponseBase): Observable<TabAsset[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TabAsset.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class EmployeesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    createEmployee(command: CreateEmployeeCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Employees";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateEmployee(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateEmployee(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreateEmployee(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getEmployeeList(): Observable<TabEmployee[]> {
        let url_ = this.baseUrl + "/api/Employees";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEmployeeList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEmployeeList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TabEmployee[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TabEmployee[]>;
        }));
    }

    protected processGetEmployeeList(response: HttpResponseBase): Observable<TabEmployee[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TabEmployee.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateEmployee(name: string, command: UpdateEmployeeCommand): Observable<TabEmployee> {
        let url_ = this.baseUrl + "/api/Employees/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateEmployee(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateEmployee(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TabEmployee>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TabEmployee>;
        }));
    }

    protected processUpdateEmployee(response: HttpResponseBase): Observable<TabEmployee> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TabEmployee.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteEmployee(name: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Employees/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteEmployee(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteEmployee(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteEmployee(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getEmployeeById(name: string): Observable<TabEmployee> {
        let url_ = this.baseUrl + "/api/Employees/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEmployeeById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEmployeeById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TabEmployee>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TabEmployee>;
        }));
    }

    protected processGetEmployeeById(response: HttpResponseBase): Observable<TabEmployee> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TabEmployee.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getEmployeeListByFilters(query: GetEmployeeListByFiltersQuery): Observable<TabEmployee[]> {
        let url_ = this.baseUrl + "/api/Employees/filter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetEmployeeListByFilters(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetEmployeeListByFilters(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TabEmployee[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TabEmployee[]>;
        }));
    }

    protected processGetEmployeeListByFilters(response: HttpResponseBase): Observable<TabEmployee[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TabEmployee.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class WeatherForecastsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getWeatherForecasts(): Observable<WeatherForecast[]> {
        let url_ = this.baseUrl + "/api/WeatherForecasts";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWeatherForecasts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWeatherForecasts(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WeatherForecast[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WeatherForecast[]>;
        }));
    }

    protected processGetWeatherForecasts(response: HttpResponseBase): Observable<WeatherForecast[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class TabDepartment implements ITabDepartment {
    name?: string;
    creation?: Date | undefined;
    modified?: Date | undefined;
    modified_by?: string | undefined;
    owner?: string | undefined;
    docstatus?: number;
    idx?: number;
    department_name?: string | undefined;
    parent_department?: string | undefined;
    company?: string | undefined;
    is_group?: number;
    disabled?: number;
    lft?: number;
    rgt?: number;
    old_parent?: string | undefined;
    _user_tags?: string | undefined;
    _comments?: string | undefined;
    _assign?: string | undefined;
    _liked_by?: string | undefined;
    payroll_cost_center?: string | undefined;
    leave_block_list?: string | undefined;

    constructor(data?: ITabDepartment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.creation = _data["creation"] ? new Date(_data["creation"].toString()) : <any>undefined;
            this.modified = _data["modified"] ? new Date(_data["modified"].toString()) : <any>undefined;
            this.modified_by = _data["modified_by"];
            this.owner = _data["owner"];
            this.docstatus = _data["docstatus"];
            this.idx = _data["idx"];
            this.department_name = _data["department_name"];
            this.parent_department = _data["parent_department"];
            this.company = _data["company"];
            this.is_group = _data["is_group"];
            this.disabled = _data["disabled"];
            this.lft = _data["lft"];
            this.rgt = _data["rgt"];
            this.old_parent = _data["old_parent"];
            this._user_tags = _data["_user_tags"];
            this._comments = _data["_comments"];
            this._assign = _data["_assign"];
            this._liked_by = _data["_liked_by"];
            this.payroll_cost_center = _data["payroll_cost_center"];
            this.leave_block_list = _data["leave_block_list"];
        }
    }

    static fromJS(data: any): TabDepartment {
        data = typeof data === 'object' ? data : {};
        let result = new TabDepartment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["creation"] = this.creation ? this.creation.toISOString() : <any>undefined;
        data["modified"] = this.modified ? this.modified.toISOString() : <any>undefined;
        data["modified_by"] = this.modified_by;
        data["owner"] = this.owner;
        data["docstatus"] = this.docstatus;
        data["idx"] = this.idx;
        data["department_name"] = this.department_name;
        data["parent_department"] = this.parent_department;
        data["company"] = this.company;
        data["is_group"] = this.is_group;
        data["disabled"] = this.disabled;
        data["lft"] = this.lft;
        data["rgt"] = this.rgt;
        data["old_parent"] = this.old_parent;
        data["_user_tags"] = this._user_tags;
        data["_comments"] = this._comments;
        data["_assign"] = this._assign;
        data["_liked_by"] = this._liked_by;
        data["payroll_cost_center"] = this.payroll_cost_center;
        data["leave_block_list"] = this.leave_block_list;
        return data;
    }
}

export interface ITabDepartment {
    name?: string;
    creation?: Date | undefined;
    modified?: Date | undefined;
    modified_by?: string | undefined;
    owner?: string | undefined;
    docstatus?: number;
    idx?: number;
    department_name?: string | undefined;
    parent_department?: string | undefined;
    company?: string | undefined;
    is_group?: number;
    disabled?: number;
    lft?: number;
    rgt?: number;
    old_parent?: string | undefined;
    _user_tags?: string | undefined;
    _comments?: string | undefined;
    _assign?: string | undefined;
    _liked_by?: string | undefined;
    payroll_cost_center?: string | undefined;
    leave_block_list?: string | undefined;
}

export class CreateDepartmentCommand implements ICreateDepartmentCommand {
    name?: string;
    parentName?: string;
    isGroup?: boolean;

    constructor(data?: ICreateDepartmentCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.parentName = _data["parentName"];
            this.isGroup = _data["isGroup"];
        }
    }

    static fromJS(data: any): CreateDepartmentCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDepartmentCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["parentName"] = this.parentName;
        data["isGroup"] = this.isGroup;
        return data;
    }
}

export interface ICreateDepartmentCommand {
    name?: string;
    parentName?: string;
    isGroup?: boolean;
}

export class CreateDepartmentListCommand implements ICreateDepartmentListCommand {
    departments?: CreateDepartmentDto[];

    constructor(data?: ICreateDepartmentListCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["departments"])) {
                this.departments = [] as any;
                for (let item of _data["departments"])
                    this.departments!.push(CreateDepartmentDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateDepartmentListCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDepartmentListCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.departments)) {
            data["departments"] = [];
            for (let item of this.departments)
                data["departments"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICreateDepartmentListCommand {
    departments?: CreateDepartmentDto[];
}

export class CreateDepartmentDto implements ICreateDepartmentDto {
    name?: string;
    parentName?: string | undefined;
    isGroup?: boolean;

    constructor(data?: ICreateDepartmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.parentName = _data["parentName"];
            this.isGroup = _data["isGroup"];
        }
    }

    static fromJS(data: any): CreateDepartmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDepartmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["parentName"] = this.parentName;
        data["isGroup"] = this.isGroup;
        return data;
    }
}

export interface ICreateDepartmentDto {
    name?: string;
    parentName?: string | undefined;
    isGroup?: boolean;
}

export class DepartmentDto implements IDepartmentDto {
    name?: string;
    isGroup?: boolean;
    children?: DepartmentDto[];

    constructor(data?: IDepartmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.isGroup = _data["isGroup"];
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(DepartmentDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DepartmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new DepartmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["isGroup"] = this.isGroup;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDepartmentDto {
    name?: string;
    isGroup?: boolean;
    children?: DepartmentDto[];
}

export class DepartmentListDto implements IDepartmentListDto {
    name?: string;
    isGroup?: boolean;
    departmentName?: string;
    parentDepartment?: string;
    company?: string;
    disabled?: boolean;
    oldParent?: string;
    comments?: string;
    assign?: string;
    likedBy?: string;
    idx?: number;
    owner?: string;

    constructor(data?: IDepartmentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.isGroup = _data["isGroup"];
            this.departmentName = _data["departmentName"];
            this.parentDepartment = _data["parentDepartment"];
            this.company = _data["company"];
            this.disabled = _data["disabled"];
            this.oldParent = _data["oldParent"];
            this.comments = _data["comments"];
            this.assign = _data["assign"];
            this.likedBy = _data["likedBy"];
            this.idx = _data["idx"];
            this.owner = _data["owner"];
        }
    }

    static fromJS(data: any): DepartmentListDto {
        data = typeof data === 'object' ? data : {};
        let result = new DepartmentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["isGroup"] = this.isGroup;
        data["departmentName"] = this.departmentName;
        data["parentDepartment"] = this.parentDepartment;
        data["company"] = this.company;
        data["disabled"] = this.disabled;
        data["oldParent"] = this.oldParent;
        data["comments"] = this.comments;
        data["assign"] = this.assign;
        data["likedBy"] = this.likedBy;
        data["idx"] = this.idx;
        data["owner"] = this.owner;
        return data;
    }
}

export interface IDepartmentListDto {
    name?: string;
    isGroup?: boolean;
    departmentName?: string;
    parentDepartment?: string;
    company?: string;
    disabled?: boolean;
    oldParent?: string;
    comments?: string;
    assign?: string;
    likedBy?: string;
    idx?: number;
    owner?: string;
}

export class CreateAssetCategoryCommand implements ICreateAssetCategoryCommand {
    assetCategoryName?: string;
    symbol?: string | undefined;
    parentName?: string | undefined;
    isGroup?: boolean | undefined;

    constructor(data?: ICreateAssetCategoryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetCategoryName = _data["assetCategoryName"];
            this.symbol = _data["symbol"];
            this.parentName = _data["parentName"];
            this.isGroup = _data["isGroup"];
        }
    }

    static fromJS(data: any): CreateAssetCategoryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAssetCategoryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetCategoryName"] = this.assetCategoryName;
        data["symbol"] = this.symbol;
        data["parentName"] = this.parentName;
        data["isGroup"] = this.isGroup;
        return data;
    }
}

export interface ICreateAssetCategoryCommand {
    assetCategoryName?: string;
    symbol?: string | undefined;
    parentName?: string | undefined;
    isGroup?: boolean | undefined;
}

export class UpdateAssetCategoryCommand implements IUpdateAssetCategoryCommand {
    name?: string;
    assetCategoryName?: string | undefined;
    symbol?: string | undefined;
    isGroup?: boolean | undefined;

    constructor(data?: IUpdateAssetCategoryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.assetCategoryName = _data["assetCategoryName"];
            this.symbol = _data["symbol"];
            this.isGroup = _data["isGroup"];
        }
    }

    static fromJS(data: any): UpdateAssetCategoryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAssetCategoryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["assetCategoryName"] = this.assetCategoryName;
        data["symbol"] = this.symbol;
        data["isGroup"] = this.isGroup;
        return data;
    }
}

export interface IUpdateAssetCategoryCommand {
    name?: string;
    assetCategoryName?: string | undefined;
    symbol?: string | undefined;
    isGroup?: boolean | undefined;
}

export class AssetCategoryDto implements IAssetCategoryDto {
    name?: string;
    assetCategoryName?: string | undefined;
    enableCwipAccounting?: boolean;
    nonDepreciableCategory?: boolean;
    symbol?: string | undefined;
    parentName?: string | undefined;
    isGroup?: boolean | undefined;
    creation?: Date | undefined;
    modified?: Date | undefined;
    modifiedBy?: string | undefined;
    owner?: string | undefined;

    constructor(data?: IAssetCategoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.assetCategoryName = _data["assetCategoryName"];
            this.enableCwipAccounting = _data["enableCwipAccounting"];
            this.nonDepreciableCategory = _data["nonDepreciableCategory"];
            this.symbol = _data["symbol"];
            this.parentName = _data["parentName"];
            this.isGroup = _data["isGroup"];
            this.creation = _data["creation"] ? new Date(_data["creation"].toString()) : <any>undefined;
            this.modified = _data["modified"] ? new Date(_data["modified"].toString()) : <any>undefined;
            this.modifiedBy = _data["modifiedBy"];
            this.owner = _data["owner"];
        }
    }

    static fromJS(data: any): AssetCategoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new AssetCategoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["assetCategoryName"] = this.assetCategoryName;
        data["enableCwipAccounting"] = this.enableCwipAccounting;
        data["nonDepreciableCategory"] = this.nonDepreciableCategory;
        data["symbol"] = this.symbol;
        data["parentName"] = this.parentName;
        data["isGroup"] = this.isGroup;
        data["creation"] = this.creation ? this.creation.toISOString() : <any>undefined;
        data["modified"] = this.modified ? this.modified.toISOString() : <any>undefined;
        data["modifiedBy"] = this.modifiedBy;
        data["owner"] = this.owner;
        return data;
    }
}

export interface IAssetCategoryDto {
    name?: string;
    assetCategoryName?: string | undefined;
    enableCwipAccounting?: boolean;
    nonDepreciableCategory?: boolean;
    symbol?: string | undefined;
    parentName?: string | undefined;
    isGroup?: boolean | undefined;
    creation?: Date | undefined;
    modified?: Date | undefined;
    modifiedBy?: string | undefined;
    owner?: string | undefined;
}

export class PaginatedListOfAssetCategoryBriefDto implements IPaginatedListOfAssetCategoryBriefDto {
    items?: AssetCategoryBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfAssetCategoryBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(AssetCategoryBriefDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfAssetCategoryBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfAssetCategoryBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfAssetCategoryBriefDto {
    items?: AssetCategoryBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class AssetCategoryBriefDto implements IAssetCategoryBriefDto {
    name?: string;
    assetCategoryName?: string | undefined;
    enableCwipAccounting?: boolean;
    nonDepreciableCategory?: boolean;
    symbol?: string | undefined;
    isGroup?: boolean | undefined;

    constructor(data?: IAssetCategoryBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.assetCategoryName = _data["assetCategoryName"];
            this.enableCwipAccounting = _data["enableCwipAccounting"];
            this.nonDepreciableCategory = _data["nonDepreciableCategory"];
            this.symbol = _data["symbol"];
            this.isGroup = _data["isGroup"];
        }
    }

    static fromJS(data: any): AssetCategoryBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new AssetCategoryBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["assetCategoryName"] = this.assetCategoryName;
        data["enableCwipAccounting"] = this.enableCwipAccounting;
        data["nonDepreciableCategory"] = this.nonDepreciableCategory;
        data["symbol"] = this.symbol;
        data["isGroup"] = this.isGroup;
        return data;
    }
}

export interface IAssetCategoryBriefDto {
    name?: string;
    assetCategoryName?: string | undefined;
    enableCwipAccounting?: boolean;
    nonDepreciableCategory?: boolean;
    symbol?: string | undefined;
    isGroup?: boolean | undefined;
}

export class AssetCategoryTreeDto implements IAssetCategoryTreeDto {
    name?: string;
    assetCategoryName?: string | undefined;
    symbol?: string | undefined;
    parentName?: string | undefined;
    isGroup?: boolean | undefined;
    children?: AssetCategoryTreeDto[];

    constructor(data?: IAssetCategoryTreeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.assetCategoryName = _data["assetCategoryName"];
            this.symbol = _data["symbol"];
            this.parentName = _data["parentName"];
            this.isGroup = _data["isGroup"];
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(AssetCategoryTreeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AssetCategoryTreeDto {
        data = typeof data === 'object' ? data : {};
        let result = new AssetCategoryTreeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["assetCategoryName"] = this.assetCategoryName;
        data["symbol"] = this.symbol;
        data["parentName"] = this.parentName;
        data["isGroup"] = this.isGroup;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAssetCategoryTreeDto {
    name?: string;
    assetCategoryName?: string | undefined;
    symbol?: string | undefined;
    parentName?: string | undefined;
    isGroup?: boolean | undefined;
    children?: AssetCategoryTreeDto[];
}

export class CreateAssetOperationCommand implements ICreateAssetOperationCommand {
    asset?: string | undefined;
    department?: string | undefined;
    operationStatus?: string | undefined;
    documentNo?: string | undefined;
    information?: string | undefined;
    buyerName?: string | undefined;
    creationDate?: Date | undefined;
    status?: number;
    executor?: string | undefined;
    motaba3aNote?: string | undefined;
    oldVal?: string | undefined;
    newVal?: string | undefined;
    backedUp?: number;

    constructor(data?: ICreateAssetOperationCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.asset = _data["asset"];
            this.department = _data["department"];
            this.operationStatus = _data["operationStatus"];
            this.documentNo = _data["documentNo"];
            this.information = _data["information"];
            this.buyerName = _data["buyerName"];
            this.creationDate = _data["creationDate"] ? new Date(_data["creationDate"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.executor = _data["executor"];
            this.motaba3aNote = _data["motaba3aNote"];
            this.oldVal = _data["oldVal"];
            this.newVal = _data["newVal"];
            this.backedUp = _data["backedUp"];
        }
    }

    static fromJS(data: any): CreateAssetOperationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAssetOperationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["asset"] = this.asset;
        data["department"] = this.department;
        data["operationStatus"] = this.operationStatus;
        data["documentNo"] = this.documentNo;
        data["information"] = this.information;
        data["buyerName"] = this.buyerName;
        data["creationDate"] = this.creationDate ? formatDate(this.creationDate) : <any>undefined;
        data["status"] = this.status;
        data["executor"] = this.executor;
        data["motaba3aNote"] = this.motaba3aNote;
        data["oldVal"] = this.oldVal;
        data["newVal"] = this.newVal;
        data["backedUp"] = this.backedUp;
        return data;
    }
}

export interface ICreateAssetOperationCommand {
    asset?: string | undefined;
    department?: string | undefined;
    operationStatus?: string | undefined;
    documentNo?: string | undefined;
    information?: string | undefined;
    buyerName?: string | undefined;
    creationDate?: Date | undefined;
    status?: number;
    executor?: string | undefined;
    motaba3aNote?: string | undefined;
    oldVal?: string | undefined;
    newVal?: string | undefined;
    backedUp?: number;
}

export class Tabasset_operation implements ITabasset_operation {
    name?: string;
    creation?: Date | undefined;
    modified?: Date | undefined;
    modified_by?: string | undefined;
    owner?: string | undefined;
    docstatus?: number;
    idx?: number;
    _user_tags?: string | undefined;
    _comments?: string | undefined;
    _assign?: string | undefined;
    _liked_by?: string | undefined;
    asset?: string | undefined;
    department?: string | undefined;
    operation_status?: string | undefined;
    document_no?: string | undefined;
    information?: string | undefined;
    buyer_name?: string | undefined;
    creation_date?: Date | undefined;
    status?: number;
    executor?: string | undefined;
    motaba3a_note?: string | undefined;
    old_val?: string | undefined;
    new_val?: string | undefined;
    backed_up?: number;

    constructor(data?: ITabasset_operation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.creation = _data["creation"] ? new Date(_data["creation"].toString()) : <any>undefined;
            this.modified = _data["modified"] ? new Date(_data["modified"].toString()) : <any>undefined;
            this.modified_by = _data["modified_by"];
            this.owner = _data["owner"];
            this.docstatus = _data["docstatus"];
            this.idx = _data["idx"];
            this._user_tags = _data["_user_tags"];
            this._comments = _data["_comments"];
            this._assign = _data["_assign"];
            this._liked_by = _data["_liked_by"];
            this.asset = _data["asset"];
            this.department = _data["department"];
            this.operation_status = _data["operation_status"];
            this.document_no = _data["document_no"];
            this.information = _data["information"];
            this.buyer_name = _data["buyer_name"];
            this.creation_date = _data["creation_date"] ? new Date(_data["creation_date"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.executor = _data["executor"];
            this.motaba3a_note = _data["motaba3a_note"];
            this.old_val = _data["old_val"];
            this.new_val = _data["new_val"];
            this.backed_up = _data["backed_up"];
        }
    }

    static fromJS(data: any): Tabasset_operation {
        data = typeof data === 'object' ? data : {};
        let result = new Tabasset_operation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["creation"] = this.creation ? this.creation.toISOString() : <any>undefined;
        data["modified"] = this.modified ? this.modified.toISOString() : <any>undefined;
        data["modified_by"] = this.modified_by;
        data["owner"] = this.owner;
        data["docstatus"] = this.docstatus;
        data["idx"] = this.idx;
        data["_user_tags"] = this._user_tags;
        data["_comments"] = this._comments;
        data["_assign"] = this._assign;
        data["_liked_by"] = this._liked_by;
        data["asset"] = this.asset;
        data["department"] = this.department;
        data["operation_status"] = this.operation_status;
        data["document_no"] = this.document_no;
        data["information"] = this.information;
        data["buyer_name"] = this.buyer_name;
        data["creation_date"] = this.creation_date ? formatDate(this.creation_date) : <any>undefined;
        data["status"] = this.status;
        data["executor"] = this.executor;
        data["motaba3a_note"] = this.motaba3a_note;
        data["old_val"] = this.old_val;
        data["new_val"] = this.new_val;
        data["backed_up"] = this.backed_up;
        return data;
    }
}

export interface ITabasset_operation {
    name?: string;
    creation?: Date | undefined;
    modified?: Date | undefined;
    modified_by?: string | undefined;
    owner?: string | undefined;
    docstatus?: number;
    idx?: number;
    _user_tags?: string | undefined;
    _comments?: string | undefined;
    _assign?: string | undefined;
    _liked_by?: string | undefined;
    asset?: string | undefined;
    department?: string | undefined;
    operation_status?: string | undefined;
    document_no?: string | undefined;
    information?: string | undefined;
    buyer_name?: string | undefined;
    creation_date?: Date | undefined;
    status?: number;
    executor?: string | undefined;
    motaba3a_note?: string | undefined;
    old_val?: string | undefined;
    new_val?: string | undefined;
    backed_up?: number;
}

export class UpdateAssetOperationCommand implements IUpdateAssetOperationCommand {
    name?: string;
    asset?: string | undefined;
    department?: string | undefined;
    operationStatus?: string | undefined;
    documentNo?: string | undefined;
    information?: string | undefined;
    buyerName?: string | undefined;
    creationDate?: Date | undefined;
    status?: number;
    executor?: string | undefined;
    motaba3aNote?: string | undefined;
    oldVal?: string | undefined;
    newVal?: string | undefined;
    backedUp?: number;

    constructor(data?: IUpdateAssetOperationCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.asset = _data["asset"];
            this.department = _data["department"];
            this.operationStatus = _data["operationStatus"];
            this.documentNo = _data["documentNo"];
            this.information = _data["information"];
            this.buyerName = _data["buyerName"];
            this.creationDate = _data["creationDate"] ? new Date(_data["creationDate"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.executor = _data["executor"];
            this.motaba3aNote = _data["motaba3aNote"];
            this.oldVal = _data["oldVal"];
            this.newVal = _data["newVal"];
            this.backedUp = _data["backedUp"];
        }
    }

    static fromJS(data: any): UpdateAssetOperationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAssetOperationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["asset"] = this.asset;
        data["department"] = this.department;
        data["operationStatus"] = this.operationStatus;
        data["documentNo"] = this.documentNo;
        data["information"] = this.information;
        data["buyerName"] = this.buyerName;
        data["creationDate"] = this.creationDate ? formatDate(this.creationDate) : <any>undefined;
        data["status"] = this.status;
        data["executor"] = this.executor;
        data["motaba3aNote"] = this.motaba3aNote;
        data["oldVal"] = this.oldVal;
        data["newVal"] = this.newVal;
        data["backedUp"] = this.backedUp;
        return data;
    }
}

export interface IUpdateAssetOperationCommand {
    name?: string;
    asset?: string | undefined;
    department?: string | undefined;
    operationStatus?: string | undefined;
    documentNo?: string | undefined;
    information?: string | undefined;
    buyerName?: string | undefined;
    creationDate?: Date | undefined;
    status?: number;
    executor?: string | undefined;
    motaba3aNote?: string | undefined;
    oldVal?: string | undefined;
    newVal?: string | undefined;
    backedUp?: number;
}

export class GetAssetOperationListByFiltersQuery implements IGetAssetOperationListByFiltersQuery {
    asset?: string | undefined;
    department?: string | undefined;
    operationStatus?: string | undefined;
    documentNo?: string | undefined;
    executor?: string | undefined;
    status?: number | undefined;
    backedUp?: number | undefined;
    creationDateFrom?: Date | undefined;
    creationDateTo?: Date | undefined;

    constructor(data?: IGetAssetOperationListByFiltersQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.asset = _data["asset"];
            this.department = _data["department"];
            this.operationStatus = _data["operationStatus"];
            this.documentNo = _data["documentNo"];
            this.executor = _data["executor"];
            this.status = _data["status"];
            this.backedUp = _data["backedUp"];
            this.creationDateFrom = _data["creationDateFrom"] ? new Date(_data["creationDateFrom"].toString()) : <any>undefined;
            this.creationDateTo = _data["creationDateTo"] ? new Date(_data["creationDateTo"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GetAssetOperationListByFiltersQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAssetOperationListByFiltersQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["asset"] = this.asset;
        data["department"] = this.department;
        data["operationStatus"] = this.operationStatus;
        data["documentNo"] = this.documentNo;
        data["executor"] = this.executor;
        data["status"] = this.status;
        data["backedUp"] = this.backedUp;
        data["creationDateFrom"] = this.creationDateFrom ? formatDate(this.creationDateFrom) : <any>undefined;
        data["creationDateTo"] = this.creationDateTo ? formatDate(this.creationDateTo) : <any>undefined;
        return data;
    }
}

export interface IGetAssetOperationListByFiltersQuery {
    asset?: string | undefined;
    department?: string | undefined;
    operationStatus?: string | undefined;
    documentNo?: string | undefined;
    executor?: string | undefined;
    status?: number | undefined;
    backedUp?: number | undefined;
    creationDateFrom?: Date | undefined;
    creationDateTo?: Date | undefined;
}

export class CreateAssetOperationStatusCommand implements ICreateAssetOperationStatusCommand {
    status?: string | undefined;

    constructor(data?: ICreateAssetOperationStatusCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): CreateAssetOperationStatusCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAssetOperationStatusCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        return data;
    }
}

export interface ICreateAssetOperationStatusCommand {
    status?: string | undefined;
}

export class Tabasset_operation_status implements ITabasset_operation_status {
    name?: string;
    creation?: Date | undefined;
    modified?: Date | undefined;
    modified_by?: string | undefined;
    owner?: string | undefined;
    docstatus?: number;
    idx?: number;
    _user_tags?: string | undefined;
    _comments?: string | undefined;
    _assign?: string | undefined;
    _liked_by?: string | undefined;
    status?: string | undefined;

    constructor(data?: ITabasset_operation_status) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.creation = _data["creation"] ? new Date(_data["creation"].toString()) : <any>undefined;
            this.modified = _data["modified"] ? new Date(_data["modified"].toString()) : <any>undefined;
            this.modified_by = _data["modified_by"];
            this.owner = _data["owner"];
            this.docstatus = _data["docstatus"];
            this.idx = _data["idx"];
            this._user_tags = _data["_user_tags"];
            this._comments = _data["_comments"];
            this._assign = _data["_assign"];
            this._liked_by = _data["_liked_by"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): Tabasset_operation_status {
        data = typeof data === 'object' ? data : {};
        let result = new Tabasset_operation_status();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["creation"] = this.creation ? this.creation.toISOString() : <any>undefined;
        data["modified"] = this.modified ? this.modified.toISOString() : <any>undefined;
        data["modified_by"] = this.modified_by;
        data["owner"] = this.owner;
        data["docstatus"] = this.docstatus;
        data["idx"] = this.idx;
        data["_user_tags"] = this._user_tags;
        data["_comments"] = this._comments;
        data["_assign"] = this._assign;
        data["_liked_by"] = this._liked_by;
        data["status"] = this.status;
        return data;
    }
}

export interface ITabasset_operation_status {
    name?: string;
    creation?: Date | undefined;
    modified?: Date | undefined;
    modified_by?: string | undefined;
    owner?: string | undefined;
    docstatus?: number;
    idx?: number;
    _user_tags?: string | undefined;
    _comments?: string | undefined;
    _assign?: string | undefined;
    _liked_by?: string | undefined;
    status?: string | undefined;
}

export class UpdateAssetOperationStatusCommand implements IUpdateAssetOperationStatusCommand {
    name?: string;
    status?: string | undefined;

    constructor(data?: IUpdateAssetOperationStatusCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): UpdateAssetOperationStatusCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAssetOperationStatusCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["status"] = this.status;
        return data;
    }
}

export interface IUpdateAssetOperationStatusCommand {
    name?: string;
    status?: string | undefined;
}

export class GetAssetOperationStatusListByFiltersQuery implements IGetAssetOperationStatusListByFiltersQuery {
    status?: string | undefined;

    constructor(data?: IGetAssetOperationStatusListByFiltersQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): GetAssetOperationStatusListByFiltersQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAssetOperationStatusListByFiltersQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        return data;
    }
}

export interface IGetAssetOperationStatusListByFiltersQuery {
    status?: string | undefined;
}

export class CreateAssetCommand implements ICreateAssetCommand {
    company?: string | undefined;
    itemCode?: string | undefined;
    itemName?: string | undefined;
    assetName?: string | undefined;
    assetCategory?: string | undefined;
    location?: string | undefined;
    custodian?: string | undefined;
    department?: string | undefined;
    costCenter?: string | undefined;
    purchaseDate?: Date | undefined;
    availableForUseDate?: Date | undefined;
    grossPurchaseAmount?: number;
    assetQuantity?: number;
    status?: string | undefined;
    employee?: string | undefined;
    serial?: string | undefined;
    customCode?: string | undefined;
    customWorth?: number;
    customCurrentValue?: number;
    customActive?: number;
    customNotes?: string | undefined;

    constructor(data?: ICreateAssetCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.company = _data["company"];
            this.itemCode = _data["itemCode"];
            this.itemName = _data["itemName"];
            this.assetName = _data["assetName"];
            this.assetCategory = _data["assetCategory"];
            this.location = _data["location"];
            this.custodian = _data["custodian"];
            this.department = _data["department"];
            this.costCenter = _data["costCenter"];
            this.purchaseDate = _data["purchaseDate"] ? new Date(_data["purchaseDate"].toString()) : <any>undefined;
            this.availableForUseDate = _data["availableForUseDate"] ? new Date(_data["availableForUseDate"].toString()) : <any>undefined;
            this.grossPurchaseAmount = _data["grossPurchaseAmount"];
            this.assetQuantity = _data["assetQuantity"];
            this.status = _data["status"];
            this.employee = _data["employee"];
            this.serial = _data["serial"];
            this.customCode = _data["customCode"];
            this.customWorth = _data["customWorth"];
            this.customCurrentValue = _data["customCurrentValue"];
            this.customActive = _data["customActive"];
            this.customNotes = _data["customNotes"];
        }
    }

    static fromJS(data: any): CreateAssetCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAssetCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["company"] = this.company;
        data["itemCode"] = this.itemCode;
        data["itemName"] = this.itemName;
        data["assetName"] = this.assetName;
        data["assetCategory"] = this.assetCategory;
        data["location"] = this.location;
        data["custodian"] = this.custodian;
        data["department"] = this.department;
        data["costCenter"] = this.costCenter;
        data["purchaseDate"] = this.purchaseDate ? formatDate(this.purchaseDate) : <any>undefined;
        data["availableForUseDate"] = this.availableForUseDate ? formatDate(this.availableForUseDate) : <any>undefined;
        data["grossPurchaseAmount"] = this.grossPurchaseAmount;
        data["assetQuantity"] = this.assetQuantity;
        data["status"] = this.status;
        data["employee"] = this.employee;
        data["serial"] = this.serial;
        data["customCode"] = this.customCode;
        data["customWorth"] = this.customWorth;
        data["customCurrentValue"] = this.customCurrentValue;
        data["customActive"] = this.customActive;
        data["customNotes"] = this.customNotes;
        return data;
    }
}

export interface ICreateAssetCommand {
    company?: string | undefined;
    itemCode?: string | undefined;
    itemName?: string | undefined;
    assetName?: string | undefined;
    assetCategory?: string | undefined;
    location?: string | undefined;
    custodian?: string | undefined;
    department?: string | undefined;
    costCenter?: string | undefined;
    purchaseDate?: Date | undefined;
    availableForUseDate?: Date | undefined;
    grossPurchaseAmount?: number;
    assetQuantity?: number;
    status?: string | undefined;
    employee?: string | undefined;
    serial?: string | undefined;
    customCode?: string | undefined;
    customWorth?: number;
    customCurrentValue?: number;
    customActive?: number;
    customNotes?: string | undefined;
}

export class TabAsset implements ITabAsset {
    name?: string;
    creation?: Date | undefined;
    modified?: Date | undefined;
    modified_by?: string | undefined;
    owner?: string | undefined;
    docstatus?: number;
    idx?: number;
    company?: string | undefined;
    item_code?: string | undefined;
    item_name?: string | undefined;
    asset_owner?: string | undefined;
    asset_owner_company?: string | undefined;
    is_existing_asset?: number;
    is_composite_asset?: number;
    supplier?: string | undefined;
    customer?: string | undefined;
    image?: string | undefined;
    journal_entry_for_scrap?: string | undefined;
    naming_series?: string | undefined;
    asset_name?: string | undefined;
    asset_category?: string | undefined;
    location?: string | undefined;
    split_from?: string | undefined;
    custodian?: string | undefined;
    department?: string | undefined;
    disposal_date?: Date | undefined;
    cost_center?: string | undefined;
    purchase_receipt?: string | undefined;
    purchase_receipt_item?: string | undefined;
    purchase_invoice?: string | undefined;
    purchase_invoice_item?: string | undefined;
    purchase_date?: Date | undefined;
    available_for_use_date?: Date | undefined;
    gross_purchase_amount?: number;
    asset_quantity?: number;
    additional_asset_cost?: number;
    total_asset_cost?: number;
    calculate_depreciation?: number;
    opening_accumulated_depreciation?: number;
    opening_number_of_booked_depreciations?: number;
    is_fully_depreciated?: number;
    depreciation_method?: string | undefined;
    value_after_depreciation?: number;
    total_number_of_depreciations?: number;
    frequency_of_depreciation?: number;
    next_depreciation_date?: Date | undefined;
    policy_number?: string | undefined;
    insurer?: string | undefined;
    insured_value?: string | undefined;
    insurance_start_date?: Date | undefined;
    insurance_end_date?: Date | undefined;
    comprehensive_insurance?: string | undefined;
    maintenance_required?: number;
    status?: string | undefined;
    booked_fixed_asset?: number;
    purchase_amount?: number;
    default_finance_book?: string | undefined;
    depr_entry_posting_status?: string | undefined;
    amended_from?: string | undefined;
    _user_tags?: string | undefined;
    _comments?: string | undefined;
    _assign?: string | undefined;
    _liked_by?: string | undefined;
    color?: string | undefined;
    employee?: string | undefined;
    serial?: string | undefined;
    custom_source?: string | undefined;
    custom_worth?: number;
    custom_current_value?: number;
    custom_evaluation?: string | undefined;
    custom_ownership_ratio?: number;
    custom_creation_date?: Date | undefined;
    custom_active?: number;
    custom_notes?: string | undefined;
    custom_asset_status?: string | undefined;
    custom_property_number?: string | undefined;
    custom_address_location?: string | undefined;
    custom_property_affiliation?: string | undefined;
    custom_property_manager?: string | undefined;
    custom_phone_number?: string | undefined;
    custom_code?: string | undefined;
    custom_area_m2?: string | undefined;
    custom_floor_level?: string | undefined;
    custom_floor_number?: string | undefined;
    custom_apartment_number?: string | undefined;
    custom_office_number?: string | undefined;
    custom_shop_number?: string | undefined;
    custom_tank_capacity_liters?: string | undefined;
    custom_land_type?: string | undefined;
    custom_tree_type?: string | undefined;
    custom_accessories?: string | undefined;
    custom_panels_count?: string | undefined;
    custom_manufacturer?: string | undefined;
    custom_model?: string | undefined;
    custom_manufacturing_year?: string | undefined;
    custom_vehicle_drive_type?: string | undefined;
    custom_quantity?: string | undefined;
    custom_fuel_type?: string | undefined;
    custom_plate_number?: string | undefined;
    custom_production_capacity?: string | undefined;
    custom_weight?: string | undefined;
    custom_generator_type?: string | undefined;
    custom_generator_capacity?: string | undefined;
    custom_panel_capacity?: string | undefined;
    custom_lines_count?: string | undefined;
    custom_country_of_origin?: string | undefined;
    custom_device_specifications?: string | undefined;
    custom_grip_type?: string | undefined;
    custom_processor_type?: string | undefined;
    custom_ram_size?: string | undefined;
    custom_hard_drive_type_capacity?: string | undefined;
    custom_screen_size?: string | undefined;
    custom_graphics_card?: string | undefined;
    custom_camera_resolution?: string | undefined;
    custom_rifle_stock?: string | undefined;
    custom_ammunition_caliber?: string | undefined;
    custom_magazines_count?: string | undefined;
    custom_base_type?: string | undefined;
    custom_memory?: string | undefined;
    custom_programming_language?: string | undefined;
    custom_developer_company?: string | undefined;
    custom_measurement?: string | undefined;
    custom_power_capacity?: string | undefined;
    custom_cameras_count?: string | undefined;
    custom_batteries_count?: string | undefined;
    custom_battery_type?: string | undefined;
    custom_battery_capacity?: string | undefined;
    custom_inverter_type?: string | undefined;
    custom_inverter_capacity?: string | undefined;
    custom_accessory_2?: string | undefined;
    custom_accessory_3?: string | undefined;
    custom_accessory_4?: string | undefined;
    custom_accessory_5?: string | undefined;
    custom_original_property_owner_name?: string | undefined;
    custom_backed_up?: string | undefined;

    constructor(data?: ITabAsset) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.creation = _data["creation"] ? new Date(_data["creation"].toString()) : <any>undefined;
            this.modified = _data["modified"] ? new Date(_data["modified"].toString()) : <any>undefined;
            this.modified_by = _data["modified_by"];
            this.owner = _data["owner"];
            this.docstatus = _data["docstatus"];
            this.idx = _data["idx"];
            this.company = _data["company"];
            this.item_code = _data["item_code"];
            this.item_name = _data["item_name"];
            this.asset_owner = _data["asset_owner"];
            this.asset_owner_company = _data["asset_owner_company"];
            this.is_existing_asset = _data["is_existing_asset"];
            this.is_composite_asset = _data["is_composite_asset"];
            this.supplier = _data["supplier"];
            this.customer = _data["customer"];
            this.image = _data["image"];
            this.journal_entry_for_scrap = _data["journal_entry_for_scrap"];
            this.naming_series = _data["naming_series"];
            this.asset_name = _data["asset_name"];
            this.asset_category = _data["asset_category"];
            this.location = _data["location"];
            this.split_from = _data["split_from"];
            this.custodian = _data["custodian"];
            this.department = _data["department"];
            this.disposal_date = _data["disposal_date"] ? new Date(_data["disposal_date"].toString()) : <any>undefined;
            this.cost_center = _data["cost_center"];
            this.purchase_receipt = _data["purchase_receipt"];
            this.purchase_receipt_item = _data["purchase_receipt_item"];
            this.purchase_invoice = _data["purchase_invoice"];
            this.purchase_invoice_item = _data["purchase_invoice_item"];
            this.purchase_date = _data["purchase_date"] ? new Date(_data["purchase_date"].toString()) : <any>undefined;
            this.available_for_use_date = _data["available_for_use_date"] ? new Date(_data["available_for_use_date"].toString()) : <any>undefined;
            this.gross_purchase_amount = _data["gross_purchase_amount"];
            this.asset_quantity = _data["asset_quantity"];
            this.additional_asset_cost = _data["additional_asset_cost"];
            this.total_asset_cost = _data["total_asset_cost"];
            this.calculate_depreciation = _data["calculate_depreciation"];
            this.opening_accumulated_depreciation = _data["opening_accumulated_depreciation"];
            this.opening_number_of_booked_depreciations = _data["opening_number_of_booked_depreciations"];
            this.is_fully_depreciated = _data["is_fully_depreciated"];
            this.depreciation_method = _data["depreciation_method"];
            this.value_after_depreciation = _data["value_after_depreciation"];
            this.total_number_of_depreciations = _data["total_number_of_depreciations"];
            this.frequency_of_depreciation = _data["frequency_of_depreciation"];
            this.next_depreciation_date = _data["next_depreciation_date"] ? new Date(_data["next_depreciation_date"].toString()) : <any>undefined;
            this.policy_number = _data["policy_number"];
            this.insurer = _data["insurer"];
            this.insured_value = _data["insured_value"];
            this.insurance_start_date = _data["insurance_start_date"] ? new Date(_data["insurance_start_date"].toString()) : <any>undefined;
            this.insurance_end_date = _data["insurance_end_date"] ? new Date(_data["insurance_end_date"].toString()) : <any>undefined;
            this.comprehensive_insurance = _data["comprehensive_insurance"];
            this.maintenance_required = _data["maintenance_required"];
            this.status = _data["status"];
            this.booked_fixed_asset = _data["booked_fixed_asset"];
            this.purchase_amount = _data["purchase_amount"];
            this.default_finance_book = _data["default_finance_book"];
            this.depr_entry_posting_status = _data["depr_entry_posting_status"];
            this.amended_from = _data["amended_from"];
            this._user_tags = _data["_user_tags"];
            this._comments = _data["_comments"];
            this._assign = _data["_assign"];
            this._liked_by = _data["_liked_by"];
            this.color = _data["color"];
            this.employee = _data["employee"];
            this.serial = _data["serial"];
            this.custom_source = _data["custom_source"];
            this.custom_worth = _data["custom_worth"];
            this.custom_current_value = _data["custom_current_value"];
            this.custom_evaluation = _data["custom_evaluation"];
            this.custom_ownership_ratio = _data["custom_ownership_ratio"];
            this.custom_creation_date = _data["custom_creation_date"] ? new Date(_data["custom_creation_date"].toString()) : <any>undefined;
            this.custom_active = _data["custom_active"];
            this.custom_notes = _data["custom_notes"];
            this.custom_asset_status = _data["custom_asset_status"];
            this.custom_property_number = _data["custom_property_number"];
            this.custom_address_location = _data["custom_address_location"];
            this.custom_property_affiliation = _data["custom_property_affiliation"];
            this.custom_property_manager = _data["custom_property_manager"];
            this.custom_phone_number = _data["custom_phone_number"];
            this.custom_code = _data["custom_code"];
            this.custom_area_m2 = _data["custom_area_m2"];
            this.custom_floor_level = _data["custom_floor_level"];
            this.custom_floor_number = _data["custom_floor_number"];
            this.custom_apartment_number = _data["custom_apartment_number"];
            this.custom_office_number = _data["custom_office_number"];
            this.custom_shop_number = _data["custom_shop_number"];
            this.custom_tank_capacity_liters = _data["custom_tank_capacity_liters"];
            this.custom_land_type = _data["custom_land_type"];
            this.custom_tree_type = _data["custom_tree_type"];
            this.custom_accessories = _data["custom_accessories"];
            this.custom_panels_count = _data["custom_panels_count"];
            this.custom_manufacturer = _data["custom_manufacturer"];
            this.custom_model = _data["custom_model"];
            this.custom_manufacturing_year = _data["custom_manufacturing_year"];
            this.custom_vehicle_drive_type = _data["custom_vehicle_drive_type"];
            this.custom_quantity = _data["custom_quantity"];
            this.custom_fuel_type = _data["custom_fuel_type"];
            this.custom_plate_number = _data["custom_plate_number"];
            this.custom_production_capacity = _data["custom_production_capacity"];
            this.custom_weight = _data["custom_weight"];
            this.custom_generator_type = _data["custom_generator_type"];
            this.custom_generator_capacity = _data["custom_generator_capacity"];
            this.custom_panel_capacity = _data["custom_panel_capacity"];
            this.custom_lines_count = _data["custom_lines_count"];
            this.custom_country_of_origin = _data["custom_country_of_origin"];
            this.custom_device_specifications = _data["custom_device_specifications"];
            this.custom_grip_type = _data["custom_grip_type"];
            this.custom_processor_type = _data["custom_processor_type"];
            this.custom_ram_size = _data["custom_ram_size"];
            this.custom_hard_drive_type_capacity = _data["custom_hard_drive_type_capacity"];
            this.custom_screen_size = _data["custom_screen_size"];
            this.custom_graphics_card = _data["custom_graphics_card"];
            this.custom_camera_resolution = _data["custom_camera_resolution"];
            this.custom_rifle_stock = _data["custom_rifle_stock"];
            this.custom_ammunition_caliber = _data["custom_ammunition_caliber"];
            this.custom_magazines_count = _data["custom_magazines_count"];
            this.custom_base_type = _data["custom_base_type"];
            this.custom_memory = _data["custom_memory"];
            this.custom_programming_language = _data["custom_programming_language"];
            this.custom_developer_company = _data["custom_developer_company"];
            this.custom_measurement = _data["custom_measurement"];
            this.custom_power_capacity = _data["custom_power_capacity"];
            this.custom_cameras_count = _data["custom_cameras_count"];
            this.custom_batteries_count = _data["custom_batteries_count"];
            this.custom_battery_type = _data["custom_battery_type"];
            this.custom_battery_capacity = _data["custom_battery_capacity"];
            this.custom_inverter_type = _data["custom_inverter_type"];
            this.custom_inverter_capacity = _data["custom_inverter_capacity"];
            this.custom_accessory_2 = _data["custom_accessory_2"];
            this.custom_accessory_3 = _data["custom_accessory_3"];
            this.custom_accessory_4 = _data["custom_accessory_4"];
            this.custom_accessory_5 = _data["custom_accessory_5"];
            this.custom_original_property_owner_name = _data["custom_original_property_owner_name"];
            this.custom_backed_up = _data["custom_backed_up"];
        }
    }

    static fromJS(data: any): TabAsset {
        data = typeof data === 'object' ? data : {};
        let result = new TabAsset();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["creation"] = this.creation ? this.creation.toISOString() : <any>undefined;
        data["modified"] = this.modified ? this.modified.toISOString() : <any>undefined;
        data["modified_by"] = this.modified_by;
        data["owner"] = this.owner;
        data["docstatus"] = this.docstatus;
        data["idx"] = this.idx;
        data["company"] = this.company;
        data["item_code"] = this.item_code;
        data["item_name"] = this.item_name;
        data["asset_owner"] = this.asset_owner;
        data["asset_owner_company"] = this.asset_owner_company;
        data["is_existing_asset"] = this.is_existing_asset;
        data["is_composite_asset"] = this.is_composite_asset;
        data["supplier"] = this.supplier;
        data["customer"] = this.customer;
        data["image"] = this.image;
        data["journal_entry_for_scrap"] = this.journal_entry_for_scrap;
        data["naming_series"] = this.naming_series;
        data["asset_name"] = this.asset_name;
        data["asset_category"] = this.asset_category;
        data["location"] = this.location;
        data["split_from"] = this.split_from;
        data["custodian"] = this.custodian;
        data["department"] = this.department;
        data["disposal_date"] = this.disposal_date ? formatDate(this.disposal_date) : <any>undefined;
        data["cost_center"] = this.cost_center;
        data["purchase_receipt"] = this.purchase_receipt;
        data["purchase_receipt_item"] = this.purchase_receipt_item;
        data["purchase_invoice"] = this.purchase_invoice;
        data["purchase_invoice_item"] = this.purchase_invoice_item;
        data["purchase_date"] = this.purchase_date ? formatDate(this.purchase_date) : <any>undefined;
        data["available_for_use_date"] = this.available_for_use_date ? formatDate(this.available_for_use_date) : <any>undefined;
        data["gross_purchase_amount"] = this.gross_purchase_amount;
        data["asset_quantity"] = this.asset_quantity;
        data["additional_asset_cost"] = this.additional_asset_cost;
        data["total_asset_cost"] = this.total_asset_cost;
        data["calculate_depreciation"] = this.calculate_depreciation;
        data["opening_accumulated_depreciation"] = this.opening_accumulated_depreciation;
        data["opening_number_of_booked_depreciations"] = this.opening_number_of_booked_depreciations;
        data["is_fully_depreciated"] = this.is_fully_depreciated;
        data["depreciation_method"] = this.depreciation_method;
        data["value_after_depreciation"] = this.value_after_depreciation;
        data["total_number_of_depreciations"] = this.total_number_of_depreciations;
        data["frequency_of_depreciation"] = this.frequency_of_depreciation;
        data["next_depreciation_date"] = this.next_depreciation_date ? formatDate(this.next_depreciation_date) : <any>undefined;
        data["policy_number"] = this.policy_number;
        data["insurer"] = this.insurer;
        data["insured_value"] = this.insured_value;
        data["insurance_start_date"] = this.insurance_start_date ? formatDate(this.insurance_start_date) : <any>undefined;
        data["insurance_end_date"] = this.insurance_end_date ? formatDate(this.insurance_end_date) : <any>undefined;
        data["comprehensive_insurance"] = this.comprehensive_insurance;
        data["maintenance_required"] = this.maintenance_required;
        data["status"] = this.status;
        data["booked_fixed_asset"] = this.booked_fixed_asset;
        data["purchase_amount"] = this.purchase_amount;
        data["default_finance_book"] = this.default_finance_book;
        data["depr_entry_posting_status"] = this.depr_entry_posting_status;
        data["amended_from"] = this.amended_from;
        data["_user_tags"] = this._user_tags;
        data["_comments"] = this._comments;
        data["_assign"] = this._assign;
        data["_liked_by"] = this._liked_by;
        data["color"] = this.color;
        data["employee"] = this.employee;
        data["serial"] = this.serial;
        data["custom_source"] = this.custom_source;
        data["custom_worth"] = this.custom_worth;
        data["custom_current_value"] = this.custom_current_value;
        data["custom_evaluation"] = this.custom_evaluation;
        data["custom_ownership_ratio"] = this.custom_ownership_ratio;
        data["custom_creation_date"] = this.custom_creation_date ? formatDate(this.custom_creation_date) : <any>undefined;
        data["custom_active"] = this.custom_active;
        data["custom_notes"] = this.custom_notes;
        data["custom_asset_status"] = this.custom_asset_status;
        data["custom_property_number"] = this.custom_property_number;
        data["custom_address_location"] = this.custom_address_location;
        data["custom_property_affiliation"] = this.custom_property_affiliation;
        data["custom_property_manager"] = this.custom_property_manager;
        data["custom_phone_number"] = this.custom_phone_number;
        data["custom_code"] = this.custom_code;
        data["custom_area_m2"] = this.custom_area_m2;
        data["custom_floor_level"] = this.custom_floor_level;
        data["custom_floor_number"] = this.custom_floor_number;
        data["custom_apartment_number"] = this.custom_apartment_number;
        data["custom_office_number"] = this.custom_office_number;
        data["custom_shop_number"] = this.custom_shop_number;
        data["custom_tank_capacity_liters"] = this.custom_tank_capacity_liters;
        data["custom_land_type"] = this.custom_land_type;
        data["custom_tree_type"] = this.custom_tree_type;
        data["custom_accessories"] = this.custom_accessories;
        data["custom_panels_count"] = this.custom_panels_count;
        data["custom_manufacturer"] = this.custom_manufacturer;
        data["custom_model"] = this.custom_model;
        data["custom_manufacturing_year"] = this.custom_manufacturing_year;
        data["custom_vehicle_drive_type"] = this.custom_vehicle_drive_type;
        data["custom_quantity"] = this.custom_quantity;
        data["custom_fuel_type"] = this.custom_fuel_type;
        data["custom_plate_number"] = this.custom_plate_number;
        data["custom_production_capacity"] = this.custom_production_capacity;
        data["custom_weight"] = this.custom_weight;
        data["custom_generator_type"] = this.custom_generator_type;
        data["custom_generator_capacity"] = this.custom_generator_capacity;
        data["custom_panel_capacity"] = this.custom_panel_capacity;
        data["custom_lines_count"] = this.custom_lines_count;
        data["custom_country_of_origin"] = this.custom_country_of_origin;
        data["custom_device_specifications"] = this.custom_device_specifications;
        data["custom_grip_type"] = this.custom_grip_type;
        data["custom_processor_type"] = this.custom_processor_type;
        data["custom_ram_size"] = this.custom_ram_size;
        data["custom_hard_drive_type_capacity"] = this.custom_hard_drive_type_capacity;
        data["custom_screen_size"] = this.custom_screen_size;
        data["custom_graphics_card"] = this.custom_graphics_card;
        data["custom_camera_resolution"] = this.custom_camera_resolution;
        data["custom_rifle_stock"] = this.custom_rifle_stock;
        data["custom_ammunition_caliber"] = this.custom_ammunition_caliber;
        data["custom_magazines_count"] = this.custom_magazines_count;
        data["custom_base_type"] = this.custom_base_type;
        data["custom_memory"] = this.custom_memory;
        data["custom_programming_language"] = this.custom_programming_language;
        data["custom_developer_company"] = this.custom_developer_company;
        data["custom_measurement"] = this.custom_measurement;
        data["custom_power_capacity"] = this.custom_power_capacity;
        data["custom_cameras_count"] = this.custom_cameras_count;
        data["custom_batteries_count"] = this.custom_batteries_count;
        data["custom_battery_type"] = this.custom_battery_type;
        data["custom_battery_capacity"] = this.custom_battery_capacity;
        data["custom_inverter_type"] = this.custom_inverter_type;
        data["custom_inverter_capacity"] = this.custom_inverter_capacity;
        data["custom_accessory_2"] = this.custom_accessory_2;
        data["custom_accessory_3"] = this.custom_accessory_3;
        data["custom_accessory_4"] = this.custom_accessory_4;
        data["custom_accessory_5"] = this.custom_accessory_5;
        data["custom_original_property_owner_name"] = this.custom_original_property_owner_name;
        data["custom_backed_up"] = this.custom_backed_up;
        return data;
    }
}

export interface ITabAsset {
    name?: string;
    creation?: Date | undefined;
    modified?: Date | undefined;
    modified_by?: string | undefined;
    owner?: string | undefined;
    docstatus?: number;
    idx?: number;
    company?: string | undefined;
    item_code?: string | undefined;
    item_name?: string | undefined;
    asset_owner?: string | undefined;
    asset_owner_company?: string | undefined;
    is_existing_asset?: number;
    is_composite_asset?: number;
    supplier?: string | undefined;
    customer?: string | undefined;
    image?: string | undefined;
    journal_entry_for_scrap?: string | undefined;
    naming_series?: string | undefined;
    asset_name?: string | undefined;
    asset_category?: string | undefined;
    location?: string | undefined;
    split_from?: string | undefined;
    custodian?: string | undefined;
    department?: string | undefined;
    disposal_date?: Date | undefined;
    cost_center?: string | undefined;
    purchase_receipt?: string | undefined;
    purchase_receipt_item?: string | undefined;
    purchase_invoice?: string | undefined;
    purchase_invoice_item?: string | undefined;
    purchase_date?: Date | undefined;
    available_for_use_date?: Date | undefined;
    gross_purchase_amount?: number;
    asset_quantity?: number;
    additional_asset_cost?: number;
    total_asset_cost?: number;
    calculate_depreciation?: number;
    opening_accumulated_depreciation?: number;
    opening_number_of_booked_depreciations?: number;
    is_fully_depreciated?: number;
    depreciation_method?: string | undefined;
    value_after_depreciation?: number;
    total_number_of_depreciations?: number;
    frequency_of_depreciation?: number;
    next_depreciation_date?: Date | undefined;
    policy_number?: string | undefined;
    insurer?: string | undefined;
    insured_value?: string | undefined;
    insurance_start_date?: Date | undefined;
    insurance_end_date?: Date | undefined;
    comprehensive_insurance?: string | undefined;
    maintenance_required?: number;
    status?: string | undefined;
    booked_fixed_asset?: number;
    purchase_amount?: number;
    default_finance_book?: string | undefined;
    depr_entry_posting_status?: string | undefined;
    amended_from?: string | undefined;
    _user_tags?: string | undefined;
    _comments?: string | undefined;
    _assign?: string | undefined;
    _liked_by?: string | undefined;
    color?: string | undefined;
    employee?: string | undefined;
    serial?: string | undefined;
    custom_source?: string | undefined;
    custom_worth?: number;
    custom_current_value?: number;
    custom_evaluation?: string | undefined;
    custom_ownership_ratio?: number;
    custom_creation_date?: Date | undefined;
    custom_active?: number;
    custom_notes?: string | undefined;
    custom_asset_status?: string | undefined;
    custom_property_number?: string | undefined;
    custom_address_location?: string | undefined;
    custom_property_affiliation?: string | undefined;
    custom_property_manager?: string | undefined;
    custom_phone_number?: string | undefined;
    custom_code?: string | undefined;
    custom_area_m2?: string | undefined;
    custom_floor_level?: string | undefined;
    custom_floor_number?: string | undefined;
    custom_apartment_number?: string | undefined;
    custom_office_number?: string | undefined;
    custom_shop_number?: string | undefined;
    custom_tank_capacity_liters?: string | undefined;
    custom_land_type?: string | undefined;
    custom_tree_type?: string | undefined;
    custom_accessories?: string | undefined;
    custom_panels_count?: string | undefined;
    custom_manufacturer?: string | undefined;
    custom_model?: string | undefined;
    custom_manufacturing_year?: string | undefined;
    custom_vehicle_drive_type?: string | undefined;
    custom_quantity?: string | undefined;
    custom_fuel_type?: string | undefined;
    custom_plate_number?: string | undefined;
    custom_production_capacity?: string | undefined;
    custom_weight?: string | undefined;
    custom_generator_type?: string | undefined;
    custom_generator_capacity?: string | undefined;
    custom_panel_capacity?: string | undefined;
    custom_lines_count?: string | undefined;
    custom_country_of_origin?: string | undefined;
    custom_device_specifications?: string | undefined;
    custom_grip_type?: string | undefined;
    custom_processor_type?: string | undefined;
    custom_ram_size?: string | undefined;
    custom_hard_drive_type_capacity?: string | undefined;
    custom_screen_size?: string | undefined;
    custom_graphics_card?: string | undefined;
    custom_camera_resolution?: string | undefined;
    custom_rifle_stock?: string | undefined;
    custom_ammunition_caliber?: string | undefined;
    custom_magazines_count?: string | undefined;
    custom_base_type?: string | undefined;
    custom_memory?: string | undefined;
    custom_programming_language?: string | undefined;
    custom_developer_company?: string | undefined;
    custom_measurement?: string | undefined;
    custom_power_capacity?: string | undefined;
    custom_cameras_count?: string | undefined;
    custom_batteries_count?: string | undefined;
    custom_battery_type?: string | undefined;
    custom_battery_capacity?: string | undefined;
    custom_inverter_type?: string | undefined;
    custom_inverter_capacity?: string | undefined;
    custom_accessory_2?: string | undefined;
    custom_accessory_3?: string | undefined;
    custom_accessory_4?: string | undefined;
    custom_accessory_5?: string | undefined;
    custom_original_property_owner_name?: string | undefined;
    custom_backed_up?: string | undefined;
}

export class UpdateAssetCommand implements IUpdateAssetCommand {
    name?: string;
    company?: string | undefined;
    itemCode?: string | undefined;
    itemName?: string | undefined;
    assetName?: string | undefined;
    assetCategory?: string | undefined;
    location?: string | undefined;
    custodian?: string | undefined;
    department?: string | undefined;
    costCenter?: string | undefined;
    purchaseDate?: Date | undefined;
    availableForUseDate?: Date | undefined;
    grossPurchaseAmount?: number;
    assetQuantity?: number;
    status?: string | undefined;
    employee?: string | undefined;
    serial?: string | undefined;
    customCode?: string | undefined;
    customWorth?: number;
    customCurrentValue?: number;
    customActive?: number;
    customNotes?: string | undefined;

    constructor(data?: IUpdateAssetCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.company = _data["company"];
            this.itemCode = _data["itemCode"];
            this.itemName = _data["itemName"];
            this.assetName = _data["assetName"];
            this.assetCategory = _data["assetCategory"];
            this.location = _data["location"];
            this.custodian = _data["custodian"];
            this.department = _data["department"];
            this.costCenter = _data["costCenter"];
            this.purchaseDate = _data["purchaseDate"] ? new Date(_data["purchaseDate"].toString()) : <any>undefined;
            this.availableForUseDate = _data["availableForUseDate"] ? new Date(_data["availableForUseDate"].toString()) : <any>undefined;
            this.grossPurchaseAmount = _data["grossPurchaseAmount"];
            this.assetQuantity = _data["assetQuantity"];
            this.status = _data["status"];
            this.employee = _data["employee"];
            this.serial = _data["serial"];
            this.customCode = _data["customCode"];
            this.customWorth = _data["customWorth"];
            this.customCurrentValue = _data["customCurrentValue"];
            this.customActive = _data["customActive"];
            this.customNotes = _data["customNotes"];
        }
    }

    static fromJS(data: any): UpdateAssetCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAssetCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["company"] = this.company;
        data["itemCode"] = this.itemCode;
        data["itemName"] = this.itemName;
        data["assetName"] = this.assetName;
        data["assetCategory"] = this.assetCategory;
        data["location"] = this.location;
        data["custodian"] = this.custodian;
        data["department"] = this.department;
        data["costCenter"] = this.costCenter;
        data["purchaseDate"] = this.purchaseDate ? formatDate(this.purchaseDate) : <any>undefined;
        data["availableForUseDate"] = this.availableForUseDate ? formatDate(this.availableForUseDate) : <any>undefined;
        data["grossPurchaseAmount"] = this.grossPurchaseAmount;
        data["assetQuantity"] = this.assetQuantity;
        data["status"] = this.status;
        data["employee"] = this.employee;
        data["serial"] = this.serial;
        data["customCode"] = this.customCode;
        data["customWorth"] = this.customWorth;
        data["customCurrentValue"] = this.customCurrentValue;
        data["customActive"] = this.customActive;
        data["customNotes"] = this.customNotes;
        return data;
    }
}

export interface IUpdateAssetCommand {
    name?: string;
    company?: string | undefined;
    itemCode?: string | undefined;
    itemName?: string | undefined;
    assetName?: string | undefined;
    assetCategory?: string | undefined;
    location?: string | undefined;
    custodian?: string | undefined;
    department?: string | undefined;
    costCenter?: string | undefined;
    purchaseDate?: Date | undefined;
    availableForUseDate?: Date | undefined;
    grossPurchaseAmount?: number;
    assetQuantity?: number;
    status?: string | undefined;
    employee?: string | undefined;
    serial?: string | undefined;
    customCode?: string | undefined;
    customWorth?: number;
    customCurrentValue?: number;
    customActive?: number;
    customNotes?: string | undefined;
}

export class GetAssetListByFiltersQuery implements IGetAssetListByFiltersQuery {
    assetName?: string | undefined;
    assetCategory?: string | undefined;
    department?: string | undefined;
    status?: string | undefined;
    employee?: string | undefined;
    customCode?: string | undefined;
    location?: string | undefined;
    company?: string | undefined;
    customActive?: number | undefined;

    constructor(data?: IGetAssetListByFiltersQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetName = _data["assetName"];
            this.assetCategory = _data["assetCategory"];
            this.department = _data["department"];
            this.status = _data["status"];
            this.employee = _data["employee"];
            this.customCode = _data["customCode"];
            this.location = _data["location"];
            this.company = _data["company"];
            this.customActive = _data["customActive"];
        }
    }

    static fromJS(data: any): GetAssetListByFiltersQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAssetListByFiltersQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetName"] = this.assetName;
        data["assetCategory"] = this.assetCategory;
        data["department"] = this.department;
        data["status"] = this.status;
        data["employee"] = this.employee;
        data["customCode"] = this.customCode;
        data["location"] = this.location;
        data["company"] = this.company;
        data["customActive"] = this.customActive;
        return data;
    }
}

export interface IGetAssetListByFiltersQuery {
    assetName?: string | undefined;
    assetCategory?: string | undefined;
    department?: string | undefined;
    status?: string | undefined;
    employee?: string | undefined;
    customCode?: string | undefined;
    location?: string | undefined;
    company?: string | undefined;
    customActive?: number | undefined;
}

export class CreateEmployeeCommand implements ICreateEmployeeCommand {
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    employeeName?: string | undefined;
    gender?: string | undefined;
    dateOfBirth?: Date | undefined;
    dateOfJoining?: Date | undefined;
    company?: string | undefined;
    department?: string | undefined;
    employeeNumber?: string | undefined;
    designation?: string | undefined;
    reportsTo?: string | undefined;
    branch?: string | undefined;
    cellNumber?: string | undefined;
    personalEmail?: string | undefined;
    companyEmail?: string | undefined;
    status?: string | undefined;
    code?: string | undefined;

    constructor(data?: ICreateEmployeeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.lastName = _data["lastName"];
            this.employeeName = _data["employeeName"];
            this.gender = _data["gender"];
            this.dateOfBirth = _data["dateOfBirth"] ? new Date(_data["dateOfBirth"].toString()) : <any>undefined;
            this.dateOfJoining = _data["dateOfJoining"] ? new Date(_data["dateOfJoining"].toString()) : <any>undefined;
            this.company = _data["company"];
            this.department = _data["department"];
            this.employeeNumber = _data["employeeNumber"];
            this.designation = _data["designation"];
            this.reportsTo = _data["reportsTo"];
            this.branch = _data["branch"];
            this.cellNumber = _data["cellNumber"];
            this.personalEmail = _data["personalEmail"];
            this.companyEmail = _data["companyEmail"];
            this.status = _data["status"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): CreateEmployeeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateEmployeeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["lastName"] = this.lastName;
        data["employeeName"] = this.employeeName;
        data["gender"] = this.gender;
        data["dateOfBirth"] = this.dateOfBirth ? formatDate(this.dateOfBirth) : <any>undefined;
        data["dateOfJoining"] = this.dateOfJoining ? formatDate(this.dateOfJoining) : <any>undefined;
        data["company"] = this.company;
        data["department"] = this.department;
        data["employeeNumber"] = this.employeeNumber;
        data["designation"] = this.designation;
        data["reportsTo"] = this.reportsTo;
        data["branch"] = this.branch;
        data["cellNumber"] = this.cellNumber;
        data["personalEmail"] = this.personalEmail;
        data["companyEmail"] = this.companyEmail;
        data["status"] = this.status;
        data["code"] = this.code;
        return data;
    }
}

export interface ICreateEmployeeCommand {
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    employeeName?: string | undefined;
    gender?: string | undefined;
    dateOfBirth?: Date | undefined;
    dateOfJoining?: Date | undefined;
    company?: string | undefined;
    department?: string | undefined;
    employeeNumber?: string | undefined;
    designation?: string | undefined;
    reportsTo?: string | undefined;
    branch?: string | undefined;
    cellNumber?: string | undefined;
    personalEmail?: string | undefined;
    companyEmail?: string | undefined;
    status?: string | undefined;
    code?: string | undefined;
}

export class TabEmployee implements ITabEmployee {
    name?: string;
    creation?: Date | undefined;
    modified?: Date | undefined;
    modified_by?: string | undefined;
    owner?: string | undefined;
    docstatus?: number;
    idx?: number;
    employee?: string | undefined;
    naming_series?: string | undefined;
    first_name?: string | undefined;
    middle_name?: string | undefined;
    last_name?: string | undefined;
    employee_name?: string | undefined;
    gender?: string | undefined;
    date_of_birth?: Date | undefined;
    salutation?: string | undefined;
    date_of_joining?: Date | undefined;
    image?: string | undefined;
    status?: string | undefined;
    user_id?: string | undefined;
    create_user_permission?: number;
    company?: string | undefined;
    department?: string | undefined;
    employee_number?: string | undefined;
    designation?: string | undefined;
    reports_to?: string | undefined;
    branch?: string | undefined;
    scheduled_confirmation_date?: Date | undefined;
    final_confirmation_date?: Date | undefined;
    contract_end_date?: Date | undefined;
    notice_number_of_days?: number;
    date_of_retirement?: Date | undefined;
    cell_number?: string | undefined;
    personal_email?: string | undefined;
    company_email?: string | undefined;
    prefered_contact_email?: string | undefined;
    prefered_email?: string | undefined;
    unsubscribed?: number;
    current_address?: string | undefined;
    current_accommodation_type?: string | undefined;
    permanent_address?: string | undefined;
    permanent_accommodation_type?: string | undefined;
    person_to_be_contacted?: string | undefined;
    emergency_phone_number?: string | undefined;
    relation?: string | undefined;
    attendance_device_id?: string | undefined;
    holiday_list?: string | undefined;
    ctc?: number;
    salary_currency?: string | undefined;
    salary_mode?: string | undefined;
    bank_name?: string | undefined;
    bank_ac_no?: string | undefined;
    iban?: string | undefined;
    marital_status?: string | undefined;
    family_background?: string | undefined;
    blood_group?: string | undefined;
    health_details?: string | undefined;
    passport_number?: string | undefined;
    valid_upto?: Date | undefined;
    date_of_issue?: Date | undefined;
    place_of_issue?: string | undefined;
    bio?: string | undefined;
    resignation_letter_date?: Date | undefined;
    relieving_date?: Date | undefined;
    held_on?: Date | undefined;
    new_workplace?: string | undefined;
    leave_encashed?: string | undefined;
    encashment_date?: Date | undefined;
    reason_for_leaving?: string | undefined;
    feedback?: string | undefined;
    lft?: number;
    rgt?: number;
    old_parent?: string | undefined;
    _user_tags?: string | undefined;
    _comments?: string | undefined;
    _assign?: string | undefined;
    _liked_by?: string | undefined;
    employment_type?: string | undefined;
    grade?: string | undefined;
    job_applicant?: string | undefined;
    default_shift?: string | undefined;
    expense_approver?: string | undefined;
    leave_approver?: string | undefined;
    shift_request_approver?: string | undefined;
    payroll_cost_center?: string | undefined;
    health_insurance_provider?: string | undefined;
    health_insurance_no?: string | undefined;
    job?: string | undefined;
    code?: string | undefined;

    constructor(data?: ITabEmployee) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.creation = _data["creation"] ? new Date(_data["creation"].toString()) : <any>undefined;
            this.modified = _data["modified"] ? new Date(_data["modified"].toString()) : <any>undefined;
            this.modified_by = _data["modified_by"];
            this.owner = _data["owner"];
            this.docstatus = _data["docstatus"];
            this.idx = _data["idx"];
            this.employee = _data["employee"];
            this.naming_series = _data["naming_series"];
            this.first_name = _data["first_name"];
            this.middle_name = _data["middle_name"];
            this.last_name = _data["last_name"];
            this.employee_name = _data["employee_name"];
            this.gender = _data["gender"];
            this.date_of_birth = _data["date_of_birth"] ? new Date(_data["date_of_birth"].toString()) : <any>undefined;
            this.salutation = _data["salutation"];
            this.date_of_joining = _data["date_of_joining"] ? new Date(_data["date_of_joining"].toString()) : <any>undefined;
            this.image = _data["image"];
            this.status = _data["status"];
            this.user_id = _data["user_id"];
            this.create_user_permission = _data["create_user_permission"];
            this.company = _data["company"];
            this.department = _data["department"];
            this.employee_number = _data["employee_number"];
            this.designation = _data["designation"];
            this.reports_to = _data["reports_to"];
            this.branch = _data["branch"];
            this.scheduled_confirmation_date = _data["scheduled_confirmation_date"] ? new Date(_data["scheduled_confirmation_date"].toString()) : <any>undefined;
            this.final_confirmation_date = _data["final_confirmation_date"] ? new Date(_data["final_confirmation_date"].toString()) : <any>undefined;
            this.contract_end_date = _data["contract_end_date"] ? new Date(_data["contract_end_date"].toString()) : <any>undefined;
            this.notice_number_of_days = _data["notice_number_of_days"];
            this.date_of_retirement = _data["date_of_retirement"] ? new Date(_data["date_of_retirement"].toString()) : <any>undefined;
            this.cell_number = _data["cell_number"];
            this.personal_email = _data["personal_email"];
            this.company_email = _data["company_email"];
            this.prefered_contact_email = _data["prefered_contact_email"];
            this.prefered_email = _data["prefered_email"];
            this.unsubscribed = _data["unsubscribed"];
            this.current_address = _data["current_address"];
            this.current_accommodation_type = _data["current_accommodation_type"];
            this.permanent_address = _data["permanent_address"];
            this.permanent_accommodation_type = _data["permanent_accommodation_type"];
            this.person_to_be_contacted = _data["person_to_be_contacted"];
            this.emergency_phone_number = _data["emergency_phone_number"];
            this.relation = _data["relation"];
            this.attendance_device_id = _data["attendance_device_id"];
            this.holiday_list = _data["holiday_list"];
            this.ctc = _data["ctc"];
            this.salary_currency = _data["salary_currency"];
            this.salary_mode = _data["salary_mode"];
            this.bank_name = _data["bank_name"];
            this.bank_ac_no = _data["bank_ac_no"];
            this.iban = _data["iban"];
            this.marital_status = _data["marital_status"];
            this.family_background = _data["family_background"];
            this.blood_group = _data["blood_group"];
            this.health_details = _data["health_details"];
            this.passport_number = _data["passport_number"];
            this.valid_upto = _data["valid_upto"] ? new Date(_data["valid_upto"].toString()) : <any>undefined;
            this.date_of_issue = _data["date_of_issue"] ? new Date(_data["date_of_issue"].toString()) : <any>undefined;
            this.place_of_issue = _data["place_of_issue"];
            this.bio = _data["bio"];
            this.resignation_letter_date = _data["resignation_letter_date"] ? new Date(_data["resignation_letter_date"].toString()) : <any>undefined;
            this.relieving_date = _data["relieving_date"] ? new Date(_data["relieving_date"].toString()) : <any>undefined;
            this.held_on = _data["held_on"] ? new Date(_data["held_on"].toString()) : <any>undefined;
            this.new_workplace = _data["new_workplace"];
            this.leave_encashed = _data["leave_encashed"];
            this.encashment_date = _data["encashment_date"] ? new Date(_data["encashment_date"].toString()) : <any>undefined;
            this.reason_for_leaving = _data["reason_for_leaving"];
            this.feedback = _data["feedback"];
            this.lft = _data["lft"];
            this.rgt = _data["rgt"];
            this.old_parent = _data["old_parent"];
            this._user_tags = _data["_user_tags"];
            this._comments = _data["_comments"];
            this._assign = _data["_assign"];
            this._liked_by = _data["_liked_by"];
            this.employment_type = _data["employment_type"];
            this.grade = _data["grade"];
            this.job_applicant = _data["job_applicant"];
            this.default_shift = _data["default_shift"];
            this.expense_approver = _data["expense_approver"];
            this.leave_approver = _data["leave_approver"];
            this.shift_request_approver = _data["shift_request_approver"];
            this.payroll_cost_center = _data["payroll_cost_center"];
            this.health_insurance_provider = _data["health_insurance_provider"];
            this.health_insurance_no = _data["health_insurance_no"];
            this.job = _data["job"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): TabEmployee {
        data = typeof data === 'object' ? data : {};
        let result = new TabEmployee();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["creation"] = this.creation ? this.creation.toISOString() : <any>undefined;
        data["modified"] = this.modified ? this.modified.toISOString() : <any>undefined;
        data["modified_by"] = this.modified_by;
        data["owner"] = this.owner;
        data["docstatus"] = this.docstatus;
        data["idx"] = this.idx;
        data["employee"] = this.employee;
        data["naming_series"] = this.naming_series;
        data["first_name"] = this.first_name;
        data["middle_name"] = this.middle_name;
        data["last_name"] = this.last_name;
        data["employee_name"] = this.employee_name;
        data["gender"] = this.gender;
        data["date_of_birth"] = this.date_of_birth ? formatDate(this.date_of_birth) : <any>undefined;
        data["salutation"] = this.salutation;
        data["date_of_joining"] = this.date_of_joining ? formatDate(this.date_of_joining) : <any>undefined;
        data["image"] = this.image;
        data["status"] = this.status;
        data["user_id"] = this.user_id;
        data["create_user_permission"] = this.create_user_permission;
        data["company"] = this.company;
        data["department"] = this.department;
        data["employee_number"] = this.employee_number;
        data["designation"] = this.designation;
        data["reports_to"] = this.reports_to;
        data["branch"] = this.branch;
        data["scheduled_confirmation_date"] = this.scheduled_confirmation_date ? formatDate(this.scheduled_confirmation_date) : <any>undefined;
        data["final_confirmation_date"] = this.final_confirmation_date ? formatDate(this.final_confirmation_date) : <any>undefined;
        data["contract_end_date"] = this.contract_end_date ? formatDate(this.contract_end_date) : <any>undefined;
        data["notice_number_of_days"] = this.notice_number_of_days;
        data["date_of_retirement"] = this.date_of_retirement ? formatDate(this.date_of_retirement) : <any>undefined;
        data["cell_number"] = this.cell_number;
        data["personal_email"] = this.personal_email;
        data["company_email"] = this.company_email;
        data["prefered_contact_email"] = this.prefered_contact_email;
        data["prefered_email"] = this.prefered_email;
        data["unsubscribed"] = this.unsubscribed;
        data["current_address"] = this.current_address;
        data["current_accommodation_type"] = this.current_accommodation_type;
        data["permanent_address"] = this.permanent_address;
        data["permanent_accommodation_type"] = this.permanent_accommodation_type;
        data["person_to_be_contacted"] = this.person_to_be_contacted;
        data["emergency_phone_number"] = this.emergency_phone_number;
        data["relation"] = this.relation;
        data["attendance_device_id"] = this.attendance_device_id;
        data["holiday_list"] = this.holiday_list;
        data["ctc"] = this.ctc;
        data["salary_currency"] = this.salary_currency;
        data["salary_mode"] = this.salary_mode;
        data["bank_name"] = this.bank_name;
        data["bank_ac_no"] = this.bank_ac_no;
        data["iban"] = this.iban;
        data["marital_status"] = this.marital_status;
        data["family_background"] = this.family_background;
        data["blood_group"] = this.blood_group;
        data["health_details"] = this.health_details;
        data["passport_number"] = this.passport_number;
        data["valid_upto"] = this.valid_upto ? formatDate(this.valid_upto) : <any>undefined;
        data["date_of_issue"] = this.date_of_issue ? formatDate(this.date_of_issue) : <any>undefined;
        data["place_of_issue"] = this.place_of_issue;
        data["bio"] = this.bio;
        data["resignation_letter_date"] = this.resignation_letter_date ? formatDate(this.resignation_letter_date) : <any>undefined;
        data["relieving_date"] = this.relieving_date ? formatDate(this.relieving_date) : <any>undefined;
        data["held_on"] = this.held_on ? formatDate(this.held_on) : <any>undefined;
        data["new_workplace"] = this.new_workplace;
        data["leave_encashed"] = this.leave_encashed;
        data["encashment_date"] = this.encashment_date ? formatDate(this.encashment_date) : <any>undefined;
        data["reason_for_leaving"] = this.reason_for_leaving;
        data["feedback"] = this.feedback;
        data["lft"] = this.lft;
        data["rgt"] = this.rgt;
        data["old_parent"] = this.old_parent;
        data["_user_tags"] = this._user_tags;
        data["_comments"] = this._comments;
        data["_assign"] = this._assign;
        data["_liked_by"] = this._liked_by;
        data["employment_type"] = this.employment_type;
        data["grade"] = this.grade;
        data["job_applicant"] = this.job_applicant;
        data["default_shift"] = this.default_shift;
        data["expense_approver"] = this.expense_approver;
        data["leave_approver"] = this.leave_approver;
        data["shift_request_approver"] = this.shift_request_approver;
        data["payroll_cost_center"] = this.payroll_cost_center;
        data["health_insurance_provider"] = this.health_insurance_provider;
        data["health_insurance_no"] = this.health_insurance_no;
        data["job"] = this.job;
        data["code"] = this.code;
        return data;
    }
}

export interface ITabEmployee {
    name?: string;
    creation?: Date | undefined;
    modified?: Date | undefined;
    modified_by?: string | undefined;
    owner?: string | undefined;
    docstatus?: number;
    idx?: number;
    employee?: string | undefined;
    naming_series?: string | undefined;
    first_name?: string | undefined;
    middle_name?: string | undefined;
    last_name?: string | undefined;
    employee_name?: string | undefined;
    gender?: string | undefined;
    date_of_birth?: Date | undefined;
    salutation?: string | undefined;
    date_of_joining?: Date | undefined;
    image?: string | undefined;
    status?: string | undefined;
    user_id?: string | undefined;
    create_user_permission?: number;
    company?: string | undefined;
    department?: string | undefined;
    employee_number?: string | undefined;
    designation?: string | undefined;
    reports_to?: string | undefined;
    branch?: string | undefined;
    scheduled_confirmation_date?: Date | undefined;
    final_confirmation_date?: Date | undefined;
    contract_end_date?: Date | undefined;
    notice_number_of_days?: number;
    date_of_retirement?: Date | undefined;
    cell_number?: string | undefined;
    personal_email?: string | undefined;
    company_email?: string | undefined;
    prefered_contact_email?: string | undefined;
    prefered_email?: string | undefined;
    unsubscribed?: number;
    current_address?: string | undefined;
    current_accommodation_type?: string | undefined;
    permanent_address?: string | undefined;
    permanent_accommodation_type?: string | undefined;
    person_to_be_contacted?: string | undefined;
    emergency_phone_number?: string | undefined;
    relation?: string | undefined;
    attendance_device_id?: string | undefined;
    holiday_list?: string | undefined;
    ctc?: number;
    salary_currency?: string | undefined;
    salary_mode?: string | undefined;
    bank_name?: string | undefined;
    bank_ac_no?: string | undefined;
    iban?: string | undefined;
    marital_status?: string | undefined;
    family_background?: string | undefined;
    blood_group?: string | undefined;
    health_details?: string | undefined;
    passport_number?: string | undefined;
    valid_upto?: Date | undefined;
    date_of_issue?: Date | undefined;
    place_of_issue?: string | undefined;
    bio?: string | undefined;
    resignation_letter_date?: Date | undefined;
    relieving_date?: Date | undefined;
    held_on?: Date | undefined;
    new_workplace?: string | undefined;
    leave_encashed?: string | undefined;
    encashment_date?: Date | undefined;
    reason_for_leaving?: string | undefined;
    feedback?: string | undefined;
    lft?: number;
    rgt?: number;
    old_parent?: string | undefined;
    _user_tags?: string | undefined;
    _comments?: string | undefined;
    _assign?: string | undefined;
    _liked_by?: string | undefined;
    employment_type?: string | undefined;
    grade?: string | undefined;
    job_applicant?: string | undefined;
    default_shift?: string | undefined;
    expense_approver?: string | undefined;
    leave_approver?: string | undefined;
    shift_request_approver?: string | undefined;
    payroll_cost_center?: string | undefined;
    health_insurance_provider?: string | undefined;
    health_insurance_no?: string | undefined;
    job?: string | undefined;
    code?: string | undefined;
}

export class UpdateEmployeeCommand implements IUpdateEmployeeCommand {
    name?: string;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    employeeName?: string | undefined;
    gender?: string | undefined;
    dateOfBirth?: Date | undefined;
    dateOfJoining?: Date | undefined;
    company?: string | undefined;
    department?: string | undefined;
    employeeNumber?: string | undefined;
    designation?: string | undefined;
    reportsTo?: string | undefined;
    branch?: string | undefined;
    cellNumber?: string | undefined;
    personalEmail?: string | undefined;
    companyEmail?: string | undefined;
    status?: string | undefined;
    code?: string | undefined;

    constructor(data?: IUpdateEmployeeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.firstName = _data["firstName"];
            this.middleName = _data["middleName"];
            this.lastName = _data["lastName"];
            this.employeeName = _data["employeeName"];
            this.gender = _data["gender"];
            this.dateOfBirth = _data["dateOfBirth"] ? new Date(_data["dateOfBirth"].toString()) : <any>undefined;
            this.dateOfJoining = _data["dateOfJoining"] ? new Date(_data["dateOfJoining"].toString()) : <any>undefined;
            this.company = _data["company"];
            this.department = _data["department"];
            this.employeeNumber = _data["employeeNumber"];
            this.designation = _data["designation"];
            this.reportsTo = _data["reportsTo"];
            this.branch = _data["branch"];
            this.cellNumber = _data["cellNumber"];
            this.personalEmail = _data["personalEmail"];
            this.companyEmail = _data["companyEmail"];
            this.status = _data["status"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): UpdateEmployeeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateEmployeeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["firstName"] = this.firstName;
        data["middleName"] = this.middleName;
        data["lastName"] = this.lastName;
        data["employeeName"] = this.employeeName;
        data["gender"] = this.gender;
        data["dateOfBirth"] = this.dateOfBirth ? formatDate(this.dateOfBirth) : <any>undefined;
        data["dateOfJoining"] = this.dateOfJoining ? formatDate(this.dateOfJoining) : <any>undefined;
        data["company"] = this.company;
        data["department"] = this.department;
        data["employeeNumber"] = this.employeeNumber;
        data["designation"] = this.designation;
        data["reportsTo"] = this.reportsTo;
        data["branch"] = this.branch;
        data["cellNumber"] = this.cellNumber;
        data["personalEmail"] = this.personalEmail;
        data["companyEmail"] = this.companyEmail;
        data["status"] = this.status;
        data["code"] = this.code;
        return data;
    }
}

export interface IUpdateEmployeeCommand {
    name?: string;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    employeeName?: string | undefined;
    gender?: string | undefined;
    dateOfBirth?: Date | undefined;
    dateOfJoining?: Date | undefined;
    company?: string | undefined;
    department?: string | undefined;
    employeeNumber?: string | undefined;
    designation?: string | undefined;
    reportsTo?: string | undefined;
    branch?: string | undefined;
    cellNumber?: string | undefined;
    personalEmail?: string | undefined;
    companyEmail?: string | undefined;
    status?: string | undefined;
    code?: string | undefined;
}

export class GetEmployeeListByFiltersQuery implements IGetEmployeeListByFiltersQuery {
    employeeName?: string | undefined;
    department?: string | undefined;
    designation?: string | undefined;
    status?: string | undefined;
    company?: string | undefined;
    employeeNumber?: string | undefined;
    code?: string | undefined;
    branch?: string | undefined;
    gender?: string | undefined;

    constructor(data?: IGetEmployeeListByFiltersQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.employeeName = _data["employeeName"];
            this.department = _data["department"];
            this.designation = _data["designation"];
            this.status = _data["status"];
            this.company = _data["company"];
            this.employeeNumber = _data["employeeNumber"];
            this.code = _data["code"];
            this.branch = _data["branch"];
            this.gender = _data["gender"];
        }
    }

    static fromJS(data: any): GetEmployeeListByFiltersQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetEmployeeListByFiltersQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["employeeName"] = this.employeeName;
        data["department"] = this.department;
        data["designation"] = this.designation;
        data["status"] = this.status;
        data["company"] = this.company;
        data["employeeNumber"] = this.employeeNumber;
        data["code"] = this.code;
        data["branch"] = this.branch;
        data["gender"] = this.gender;
        return data;
    }
}

export interface IGetEmployeeListByFiltersQuery {
    employeeName?: string | undefined;
    department?: string | undefined;
    designation?: string | undefined;
    status?: string | undefined;
    company?: string | undefined;
    employeeNumber?: string | undefined;
    code?: string | undefined;
    branch?: string | undefined;
    gender?: string | undefined;
}

export class WeatherForecast implements IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            this.temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    return _observableThrow(new SwaggerException(message, status, response, headers, result));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}